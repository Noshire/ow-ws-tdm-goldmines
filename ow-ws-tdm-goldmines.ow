settings
{
	main
	{
		Mode Name: "Goldmine TDM"
	}

	lobby
	{
		Map Rotation: Paused
		Max Team 1 Players: 3
		Max Team 2 Players: 3
	}

	modes
	{
		Team Deathmatch
		{
			enabled maps
			{
				Ilios Lighthouse
			}
		}
	}

	extensions
	{
		Beam Effects
		Beam Sounds
		Buff Status Effects
		Debuff Status Effects
		Buff and Debuff Sounds
		Energy Explosion Effects
		Kinetic Explosion Effects
		Explosion Sounds
		Play More Effects
	}
}

variables
{
	global:
		26: SpawnPositions
		27: MinePositions
		28: MinePositionsIndex

	player:
		26: TeamIndex
}

rule("Init@Global: SetPositions")
{
	event
	{
		Ongoing - Global;
	}

	actions
	{
		Global.SpawnPositions = Array(Vector(336.461, -24.274, 22.927), Vector(290.193, -24.276, -88.772));
		Global.MinePositions = Array(Vector(329.230, -17.341, -56.517), Vector(341.309, -17.341, -27.567), Vector(332.087, -26.341,
			-95.429), Vector(370.586, -26.341, -1.469), Vector(317.227, -22.342, -22.655), Vector(307.874, -22.341, -43.050), Vector(
			357.681, -24.341, -51.111));
	}
}

rule("Init@Global: SpawnMines")
{
	event
	{
		Ongoing - Global;
	}

	conditions
	{
		disabled Is Game In Progress == True;
	}

	actions
	{
		Wait(5, Ignore Condition);
		For Global Variable(MinePositionsIndex, 0, Count Of(Global.MinePositions), 1);
			Log To Inspector(Custom String("Mine at: {0}", Global.MinePositions[Global.MinePositionsIndex]));
			Create Effect(All Players(All Teams), Sphere, Custom Color(191, 186, 33, 150), Global.MinePositions[Global.MinePositionsIndex],
				Workshop Setting Real(Custom String("Gold Mines"), Custom String("Radius"), 2.500, 0.500, 15, 0), None);
		End;
	}
}

rule("Init@Player: SetTeamIndex")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	actions
	{
		Event Player.TeamIndex = Team Of(Event Player) == Team 1 ? 0 : 1;
	}
}

rule("Respawn@Player: TeleportToSpawn")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
	}

	actions
	{
		Teleport(Event Player, Global.SpawnPositions[Event Player.TeamIndex]);
	}
}

rule("DEBUG:Interact@Player: TeleportToRandomMine")
{
	event
	{
		Ongoing - Each Player;
		All;
		All;
	}

	conditions
	{
		Has Spawned(Event Player) == True;
		Is Alive(Event Player) == True;
		Is Button Held(Event Player, Button(Interact)) == True;
	}

	actions
	{
		disabled For Global Variable(MinePositionsIndex, 0, Count Of(Global.MinePositions), 1);
		disabled Create Beam Effect(Event Player, Echo Focusing Beam, Event Player, Global.MinePositions[Global.MinePositionsIndex], Color(White),
			Visible To Position and Radius);
		disabled End;
		Teleport(Event Player, Random Value In Array(Global.MinePositions));
	}
}